<?php
/**
 * IIIF Spec v2 PHP Implementation
 *
 * @author Jonathan BARDA / SIB - 2020
 */

// Call Router
// require __DIR__ . '/../../../router.php';

// Call F3
if (!isset($f3)) {
    $f3 = require(__DIR__ . '/../../../libs/fatfree-3.7.2/lib/base.php');
}

// Call bootstrap code
require __DIR__ . '/../../../inc/bootstrap.php';

// Import JSON config to F3
$f3->set('app_config', $app_config);

// Call data class
require_once __DIR__ . '/../../../classes/data.php';

// Init data class
// Most of the class methods will reset the internal counter, maybe that's not good...
$data = new Data();

// Load content to the main app
$app->set_content($data->get_structure());

// Create database from loaded content
// $app->create_db('manuscripts');

// Load existing database
$app->load_db('manuscripts');

// Create database instance
// $db = $app->get_db();

// Import manuscript database to F3
// $f3->set('app_manuscripts', $db['manuscripts']);

// Import app instance to F3
$f3->set('app_instance', $app);

// Testing F3
// $f3->route('GET /',
//     function() {
//         echo 'Hello, world!<br>From: ' . __FILE__;
//     }
// );

// Custom Manuscript IIIF API 0.1
// IIIF Image Specs: https://iiif.io/api/image/2.1/
// IIIF Presentation Specs: https://iiif.io/api/presentation/2.1/
$f3->route('GET /',
    function($f3) {
        // Build API response
        $api_response           = new stdClass();
        $api_response->altered  = true;
        $api_response->original = false;
        $api_response->spec     = '2.1';
        $api_response->syntax   = [
            $f3->get('REALM') . 'collection',
            $f3->get('REALM') . '{id}/canvas/p{page-num}',
            $f3->get('REALM') . '{id}/info/{format}',
            $f3->get('REALM') . '{id}/manifest',
            $f3->get('REALM') . '{id}/page/p{page-num}/{part-num}',
            $f3->get('REALM') . '{id}/{page}',
            $f3->get('REALM') . '{id}/{page}/annotation/p{4digit-num}-image',
            $f3->get('REALM') . '{id}/{page}/comments/p{page-num}/{part-num}',
            $f3->get('REALM') . '{id}/{page}/{region}/{size}/{rotation}/{quality}/{format}',
            $f3->get('REALM') . '{id}/{region}/{size}/{rotation}/{quality}/{format}',
            $f3->get('REALM') . '{auth}/{login}',
            $f3->get('REALM') . '{auth}/{token}',
        ];
        $api_response->version  = '0.1';

        // Set response as JSON
        header('Content-Type: text/json');

        // Display IIIF Image API Schema
        echo json_encode($api_response, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
    }
);

// Test collection route
$f3->route('GET /collection',
    // Return collection based on sample:
    // https://iiif.io/api/presentation/2.1/#collection
    function($f3) {
        // Build API response
        $api_response               = new stdClass();
        $api_response->{'@context'} = 'http://iiif.io/api/presentation/2/context.json';
        $api_response->{'@id'}      = $f3->get('REALM') . '/top';
        $api_response->{'@type'}    = 'sc:Collection';
        $api_response->label        = 'Collection for the Mark16 project';
        $api_response->viewingHint  = 'top';
        $api_response->description  = 'This is the IIIF collection for the Mark16 project';
        $api_response->attribution  = 'Provided by SIB / DH+ Group';
        
        // Build collection manifests
        $api_response->manifests = [];

        // Iterate over imported manuscripts
        // foreach ($f3->app_manuscripts as $manuscript) {
        foreach ($f3->app_instance->get_manuscripts() as $manuscript) {
            // Generate item object
            $manifest            = new stdClass();
            $manifest->{'@id'}   = str_replace('collection', $manuscript['name'], $f3->get('REALM')) . '/manifest';
            $manifest->{'@type'} = 'sc:Manifest';
            $manifest->label     = $manuscript['name'];

            // Import manifest object to collection
            $api_response->manifests[] = $manifest;
        }

        // Set response as JSON
        header('Content-Type: text/json');

        // Display IIIF Image API Schema
        echo json_encode($api_response, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
    }
);

// Test manifest route
$f3->route('GET /@id/manifest',
    // Return manifest based on sample:
    // https://iiif.io/api/presentation/3.0/#52-manifest
    function($f3, $params) {
        // Build API response
        $api_response               = new stdClass();
        $api_response->{'@context'} = 'http://iiif.io/api/presentation/2/context.json';
        $api_response->{'@type'}    = 'sc:Manifest';
        $api_response->{'@id'}      = $f3->get('REALM');

        // Iterate over imported manuscripts
        // foreach ($f3->app_manuscripts as $manuscript) {
        foreach ($f3->app_instance->get_manuscripts() as $manuscript) {
            if ($manuscript['name'] === $params['id']) {
                // Set manuscript name
                $manuscript_name = $manuscript['name'];

                // Add label
                $api_response->label    = $manuscript_name;
                $api_response->metadata = [];

                // Get manuscript data
                $manuscript_data = $f3->app_instance->get_manuscript($manuscript_name);

                // Get manuscript dcterms (main folio only)
                if (count($manuscript['sub_folder']) > 0) {
                    $dcterms = $manuscript_data[$manuscript_name][0]['data']['dcterms'];
                }
                else {
                    $dcterms = $manuscript_data[$manuscript_name]['data']['dcterms'];
                }

                // Iterate over manuscript dcterms
                foreach ($dcterms as $key => $value) {
                    switch ($key) {
                        case 'dcterm-creator':
                            $meta              = new stdClass();
                            $meta->label       = 'Author';
                            $meta->value       = (string)$value[0];

                            // Add built metas
                            $api_response->metadata[] = $meta;
                            break;

                        case 'dcterm-provenance':
                            $meta            = new stdClass();
                            $meta->label     = 'Published';
                            $meta->value     = [];

                            // Create new value object
                            $meta_value = new stdClass();
                            $meta_value->{'@value'} = (string)$value[0];
                            $meta_value->{'@language'} = (string)$dcterms['dcterm-language'][0];
                            $meta->value[] = $meta_value;

                            // Add built metas
                            $api_response->metadata[] = $meta;
                            break;
                    }
                }

                // Add description
                $api_response->description = (string)$dcterms['dcterm-abstract'][0];

                // Add navData
                $api_response->navDate = (string)$dcterms['dcterm-created'][0];

                // Add license
                $api_response->license = (string)$dcterms['dcterm-license'][0];

                // Add attribution
                $api_response->attribution = 'Provided by ' . (string)$dcterms['dcterm-provenance'][0];

                // Add service
                $api_response->service = new stdClass();
                $api_response->service->{'@context'}  = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                $api_response->service->{'@context'} .= 'api/iiif/2/ns/jsonld/context/json';
                $api_response->service->{'@id'}  = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                $api_response->service->{'@id'} .= 'api/iiif/2/service/example';
                $api_response->service->profile = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                $api_response->service->profile .= 'api/iiif/2/docs/example-service.html';

                // TODO: Add 'rendering' block
                // TODO: Add 'within' property

                // List of Canvases (where are linked the images)
                $api_response->sequences = [];

                // Gather all sub folders
                $sub_folder_index = 0;
                if (count($manuscript['sub_folder']) > 0) {
                    // Iterate over all discovered folios
                    foreach ($manuscript['sub_folder'] as $folio_name) {
                        // Increment sub folder index
                        $sub_folder_index++;

                        // Build sequence object
                        $sequence            = new stdClass();
                        $sequence->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                        $sequence->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/sequence/normal';
                        $sequence->{'@type'} = 'sc:Sequence';
                        $sequence->label     = 'Current Page Order';

                        // Add presentation details
                        $sequence->viewingHint = 'paged';
                        switch ($dcterms['dcterm-language'][0]) {
                            case 'Arabic':
                                $sequence->viewingDirection = 'right-to-left';
                                break;
                            
                            default:
                                $sequence->viewingDirection = 'left-to-right';
                                break;
                        }

                        // Add canva details
                        $sequence->canvases = [];

                        // Gather image info
                        foreach ($manuscript['content'] as $file) {
                            if (stripos($file, $folio_name) !== false) {
                                if (stripos($file, '.jpg') !== false || stripos($file, '.jpeg') !== false) {
                                    // Define image path
                                    $manuscript_path       = __DIR__ . '/../../../../data/manuscripts/' . $manuscript_name;
                                    $manuscript_image      = $file;
                                    $manuscript_image_path = $manuscript_path . '/' . $file;

                                    // Get image dimensions
                                    $image_size = getimagesize($manuscript_image_path);
                                    $image_details = pathinfo($manuscript_image_path);

                                    // Create canva object
                                    $canvas = new stdClass();
                                    $canvas->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $canvas->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/canvas/p' . $sub_folder_index;
                                    $canvas->{'@type'} = 'sc:Canvas';
                                    $canvas->label     = $folio_name;

                                    // Set image dimensions to canvas object
                                    $canvas->width     = $image_size[0];
                                    $canvas->height    = $image_size[1];

                                    // Create canvas images array
                                    $canvas->images    = [];

                                    // Create image object
                                    $image = new stdClass();
                                    $image->{'@type'} = 'oa:Annotation';
                                    $image->motivation = 'sc:painting';
                                    $image->resource = new stdClass();
                                    $image->resource->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $image->resource->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/res/page' . $sub_folder_index . '.' . $image_details['extension'];
                                    $image->resource->{'@type'} = 'dctypes:Image';
                                    $image->resource->format = 'image/jpeg';
                                    $image->resource->service = new stdClass();
                                    $image->resource->service->{'@context'} = 'http://iiif.io/api/image/2/context.json';
                                    $image->resource->service->{'@id'}  = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $image->resource->service->{'@id'} .= 'api/iiif/2/images/' . $manuscript_name . '-page' . $sub_folder_index;
                                    $image->resource->service->profile  = 'http://iiif.io/api/image/2/level1.json';
                                    $image->resource->width             = $image_size[0];
                                    $image->resource->height            = $image_size[1];
                                    $image->on                          = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $image->on                         .= 'api/iiif/2/' . $manuscript_name . '/canvas/p' . $sub_folder_index;

                                    // Add image object to canvas images array
                                    $canvas->images[] = $image;

                                    // Create canvas otherContent array
                                    $canvas->otherContent = [];

                                    // Create otherContent object
                                    $otherContent                    = new stdClass();
                                    $otherContent->{'@id'}           = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $otherContent->{'@id'}          .= 'api/iiif/2/' . $manuscript_name . '/list/p' . $sub_folder_index . '.' . $image_details['extension'];
                                    $otherContent->{'@type'}         = 'sc:AnnotationList';
                                    $otherContent->within            = new stdClass();
                                    $otherContent->within->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                                    $otherContent->within->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/layer/l' . $sub_folder_index;
                                    $otherContent->within->{'@type'} = 'sc:Layer';
                                    $otherContent->within->label     = 'Example Layer';

                                    // Add image object to canvas images array
                                    $canvas->otherContent[] = $otherContent;
                                }
                            }
                        }

                        // Add canvas object to canvases array
                        $sequence->canvases[] = $canvas;

                        // Add all sequences
                        $api_response->sequences[] = $sequence;
                    }
                }

                // Read the single one
                else {
                    // Build sequence object
                    $sequence            = new stdClass();
                    $sequence->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                    $sequence->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/sequence/normal';
                    $sequence->{'@type'} = 'sc:Sequence';
                    $sequence->label     = 'Current Page Order';

                    // Add presentation details
                    $sequence->viewingHint = 'paged';
                    switch ($dcterms['dcterm-language'][0]) {
                        case 'Arabic':
                            $sequence->viewingDirection = 'right-to-left';
                            break;
                        
                        default:
                            $sequence->viewingDirection = 'left-to-right';
                            break;
                    }

                    // Add canva details
                    $sequence->canvases = [];

                    // Gather image info
                    foreach ($manuscript['content'] as $file) {
                        if (stripos($file, '.jpg') !== false || stripos($file, '.jpeg') !== false) {
                            // Define image path
                            $manuscript_path       = __DIR__ . '/../../../../data/manuscripts/' . $manuscript_name;
                            $manuscript_image      = $file;
                            $manuscript_image_path = $manuscript_path . '/' . $file;

                            // Get image dimensions
                            $image_size = getimagesize($manuscript_image_path);
                            $image_details = pathinfo($manuscript_image_path);

                            // Create canva object
                            $canvas = new stdClass();
                            $canvas->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $canvas->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/canvas/p1';
                            $canvas->{'@type'} = 'sc:Canvas';
                            $canvas->label     = $manuscript_name;

                            // Set image dimensions to canvas object
                            $canvas->width     = $image_size[0];
                            $canvas->height    = $image_size[1];

                            // Create canvas images array
                            $canvas->images    = [];

                            // Create image object
                            $image = new stdClass();
                            $image->{'@type'} = 'oa:Annotation';
                            $image->motivation = 'sc:painting';
                            $image->resource = new stdClass();
                            $image->resource->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $image->resource->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/res/page1.' . $image_details['extension'];
                            $image->resource->{'@type'} = 'dctypes:Image';
                            $image->resource->format = 'image/jpeg';
                            $image->resource->service = new stdClass();
                            $image->resource->service->{'@context'} = 'http://iiif.io/api/image/2/context.json';
                            $image->resource->service->{'@id'}  = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $image->resource->service->{'@id'} .= 'api/iiif/2/images/' . $manuscript_name . '-page1';
                            $image->resource->service->profile  = 'http://iiif.io/api/image/2/level1.json';
                            $image->resource->width             = $image_size[0];
                            $image->resource->height            = $image_size[1];
                            $image->on                          = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $image->on                         .= 'api/iiif/2/' . $manuscript_name . '/canvas/p1';

                            // Add image object to canvas images array
                            $canvas->images[] = $image;

                            // Create canvas otherContent array
                            $canvas->otherContent = [];

                            // Create otherContent object
                            $otherContent                    = new stdClass();
                            $otherContent->{'@id'}           = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $otherContent->{'@id'}          .= 'api/iiif/2/' . $manuscript_name . '/list/p1.' . $image_details['extension'];
                            $otherContent->{'@type'}         = 'sc:AnnotationList';
                            $otherContent->within            = new stdClass();
                            $otherContent->within->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                            $otherContent->within->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/layer/l1';
                            $otherContent->within->{'@type'} = 'sc:Layer';
                            $otherContent->within->label     = 'Example Layer';

                            // Add image object to canvas images array
                            $canvas->otherContent[] = $otherContent;
                        }
                    }

                    // Add canvas object to canvases array
                    $sequence->canvases[] = $canvas;

                    // Add all sequences
                    $api_response->sequences[] = $sequence;
                }

                // List of structures
                $api_response->structures = [];

                // Create structure object
                $structure            = new stdClass();
                $structure->{'@id'}   = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root;
                $structure->{'@id'}  .= 'api/iiif/2/' . $manuscript_name . '/range/r1';
                $structure->{'@type'} = 'sc:Range';
                $structure->label     = 'Introduction';

                // Create canvases structure array
                $structure->canvases  = [];
                if (count($manuscript['sub_folder']) > 0) {
                    $loop = 0;
                    foreach ($manuscript['sub_folder'] as $folio_canvas) {
                        // Increment loop counter
                        $loop++;

                        // Add canvas to canvases structure array
                        $structure->canvases[] = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root . 'api/iiif/2/' . $manuscript_name . '/canvas/p' . $loop;
                    }
                }
                else {
                    // Add canvas to canvases structure array
                    $structure->canvases[] = $f3->get('SCHEME') . '://' . $f3->get('SERVER.HTTP_HOST') . $f3->app_config->web_root . 'api/iiif/2/' . $manuscript_name . '/canvas/p1';
                }

                // Add structure object structures array
                $api_response->structures[] = $structure;
            }

        }

        // Set response as JSON
        header('Content-Type: text/json');

        // Display IIIF Image API Schema
        echo json_encode($api_response, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);
    }
);

// Test image route
// $f3->route('GET|POST /@prefix/@id/@region/@size/@rotation/*',
$f3->route('GET|POST /@prefix/@id/@region/@size/@rotation/@quality/@format',
    // Can't respect the standard implementation for now
    // Have to replace '{quality}.{format}' by '{quality}/{format}'
    // Associated token: /*

    function($f3, $params) {
        echo '<pre>' . print_r($params, true) . '</pre>' . PHP_EOL;
        if ($f3->app_config->debug === true) {
            echo '<pre>' . print_r($f3, true) . '</pre>' . PHP_EOL;
        }
    }
);
$f3->route('GET|POST /@prefix/@id/@region/@size/@rotation/@file',
    // Can't respect the standard implementation for now
    // Have to replace '{quality}.{format}' by '{quality}/{format}'
    // Associated token: /*

    function($f3, $params) {
        echo '<pre>' . print_r($params, true) . '</pre>' . PHP_EOL;
        if ($f3->app_config->debug === true) {
            echo '<pre>' . print_r($f3, true) . '</pre>' . PHP_EOL;
        }
    }
);

// Test image info route
/* $f3->route('GET|POST /@id/info',
    // Can't respect the standard implementation for now
    // Have to replace 'info.{format}' by 'info/{format}'
    // Associated token: info/*

    function($f3, $params) {
        echo '<pre>' . print_r($params, true) . '</pre>' . PHP_EOL;
        if ($f3->app_config->debug === true) {
            echo '<pre>' . print_r($f3, true) . '</pre>' . PHP_EOL;
        }
    }
); */
$f3->route('GET|POST /@id/info/@format',
    // Can't respect the standard implementation for now
    // Have to replace 'info.{format}' by 'info/{format}'
    // Associated token: info/*

    function($f3, $params) {
        echo '<pre>' . print_r($params, true) . '</pre>' . PHP_EOL;
        if ($f3->app_config->debug === true) {
            echo '<pre>' . print_r($f3, true) . '</pre>' . PHP_EOL;
        }
    }
);

// Init routing engine
$f3->run();